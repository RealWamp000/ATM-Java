import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashMap;//anahtar-değer çiftleriyle veri depolamak için kullanılan bir koleksiyon sınıfıdır.
import java.util.InputMismatchException;
import java.util.Iterator;// Bir koleksiyondaki öğelere sırasıyla erişmek için kullanılır.
import java.util.Map;//Bir anahtar ile ilişkilendirilmiş değerleri depolamak ve erişmek için kullanılır.
import java.util.Scanner;

public class OptionMenu {
	Scanner menuInput = new Scanner(System.in);
	DecimalFormat moneyFormat = new DecimalFormat("'$'###,##0.00");
	HashMap<Integer, Account> data = new HashMap<Integer, Account>();//anahtar tipi integer,  Yani, her anahtara karşılık gelen bir Account nesnesi saklanacaktır. 

	public void getLogin() throws IOException {
		boolean end = false;
		int customerNumber = 0;
		int pinNumber = 0;
		while (!end) {
			try {
				System.out.print("\nEnter your customer number: ");
				customerNumber = menuInput.nextInt();//kullanicidan int degeri alinir
				System.out.print("\nEnter your PIN number: ");
				pinNumber = menuInput.nextInt();
				Iterator it = data.entrySet().iterator();//Koleksiyon üzerinde sırasıyla ilerlemek için bir Iterator nesnesi döndürür.
				while (it.hasNext()) {
					Map.Entry pair = (Map.Entry) it.next();
					Account acc = (Account) pair.getValue();//nesnesi, her bir anahtar-değer çiftini temsil eder. getValue() metodu, bu çiftin değer kısmını döndürür. Bu durumda, değer kısmı bir Account nesnesi olmalıdır.
					if (data.containsKey(customerNumber) && pinNumber == acc.getPinNumber()) {
						getAccountType(acc);//Bu çağrı, bir Account nesnesi üzerinden kullanıcıya ait hesap türünü seçmesini sağlamak amacıyla yazılmış olabilir.
						end = true;
						break;
					}
				}
				if (!end) {
					System.out.println("\nWrong Customer Number or Pin Number");
				}
			} catch (InputMismatchException e) {
				System.out.println("\nInvalid Character(s). Only Numbers.");
			}
		}
	}

    public void getAccountType(Account acc) {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSelect the account you want to access: ");
                System.out.println(" Type 1 - Checkings Account");
                System.out.println(" Type 2 - Savings Account");
                System.out.println(" Type 3 - Exit");
                System.out.print("\nChoice: ");
                int selection = menuInput.nextInt(); // Kullanıcıdan hesap türünü seçmesini isteyen giriş

                switch (selection) {
                    case 1:
                        getChecking(acc); // Checking hesabına erişim
                        break;
                    case 2:
                        getSaving(acc); // Savings hesabına erişim
                        break;
                    case 3:
                        end = true; // Çıkış
                        break;
                    default:
                        System.out.println("\nInvalid Choice."); // Geçersiz seçim mesajı
                }
            } catch (InputMismatchException e) {
                System.out.println("\nInvalid Choice."); // Hatalı seçim mesajı
                menuInput.next(); // Hatalı giriş temizliği
            }
        }
    }

    public void getChecking(Account acc) {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nCheckings Account: ");
                System.out.println(" Type 1 - View Balance");
                System.out.println(" Type 2 - Withdraw Funds");
                System.out.println(" Type 3 - Deposit Funds");
                System.out.println(" Type 4 - Transfer Funds");
                System.out.println(" Type 5 - Exit");
                System.out.print("\nChoice: ");
                int selection = menuInput.nextInt(); // Kullanıcıdan işlem seçimi

                switch (selection) {
                    case 1:
                        System.out.println("\nCheckings Account Balance: " + moneyFormat.format(acc.getCheckingBalance())); // Hesap bakiyesini göster
                        break;
                    case 2:
                        acc.getCheckingWithdrawInput(); // Para çekme işlemi
                        break;
                    case 3:
                        acc.getCheckingDepositInput(); // Para yatırma işlemi
                        break;
                    case 4:
                        acc.getTransferInput("Checkings"); // Para transferi işlemi
                        break;
                    case 5:
                        end = true; // Çıkış
                        break;
                    default:
                        System.out.println("\nInvalid Choice."); // Geçersiz seçim mesajı
                }
            } catch (InputMismatchException e) {
                System.out.println("\nInvalid Choice."); // Hatalı seçim mesajı
                menuInput.next(); // Hatalı giriş temizliği
            }
        }
    }

    public void getSaving(Account acc) {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSavings Account: ");
                System.out.println(" Type 1 - View Balance");
                System.out.println(" Type 2 - Withdraw Funds");
                System.out.println(" Type 3 - Deposit Funds");
                System.out.println(" Type 4 - Transfer Funds");
                System.out.println(" Type 5 - Exit");
                System.out.print("Choice: ");
                int selection = menuInput.nextInt(); // Kullanıcıdan işlem seçimi

                switch (selection) {
                    case 1:
                        System.out.println("\nSavings Account Balance: " + moneyFormat.format(acc.getSavingBalance())); // Hesap bakiyesini göster
                        break;
                    case 2:
                        acc.getsavingWithdrawInput(); // Para çekme işlemi
                        break;
                    case 3:
                        acc.getSavingDepositInput(); // Para yatırma işlemi
                        break;
                    case 4:
                        acc.getTransferInput("Savings"); // Para transferi işlemi
                        break;
                    case 5:
                        end = true; // Çıkış
                        break;
                    default:
                        System.out.println("\nInvalid Choice."); // Geçersiz seçim mesajı
                }
            } catch (InputMismatchException e) {
                System.out.println("\nInvalid Choice."); // Hatalı seçim mesajı
                menuInput.next(); // Hatalı giriş temizliği
            }
        }
    }

    public void createAccount() throws IOException {
        int cst_no = 0; // Müşteri numarası
        boolean end = false; // Döngüyü kontrol eden değişken
        while (!end) {
            try {
                System.out.println("\nEnter your customer number ");
                cst_no = menuInput.nextInt(); // Müşteri numarasını alır
                Iterator it = data.entrySet().iterator(); // HashMap üzerinde iterasyon başlatır
                while (it.hasNext()) {
                    Map.Entry pair = (Map.Entry) it.next();
                    // Eğer müşteri numarası zaten varsa yeni bir hesap oluşturulmaz
                    if (!data.containsKey(cst_no)) {
                        end = true; // Müşteri numarası geçerli
                    }
                }
                if (!end) {
                    System.out.println("\nThis customer number is already registered"); // Müşteri numarası zaten kayıtlı
                }
            } catch (InputMismatchException e) {
                System.out.println("\nInvalid Choice."); // Hatalı seçim mesajı
                menuInput.next(); // Hatalı giriş temizliği
            }
        }

        System.out.println("\nEnter PIN to be registered");
        int pin = menuInput.nextInt(); // PIN numarasını alır
        data.put(cst_no, new Account(cst_no, pin)); // Yeni müşteri hesabı oluşturur
        System.out.println("\nYour new account has been successfuly registered!"); // Başarılı kayıt mesajı
        System.out.println("\nRedirecting to login.............");
        getLogin(); // Giriş ekranına yönlendir
    }

	public void mainMenu() throws IOException {//gordugunuz gibi burda da test amacli musteri ekliyoruz
		data.put(952141, new Account(952141, 191904, 1000, 5000));
		data.put(123, new Account(123, 123, 20000, 50000));
		/*
		customerNumber = 952141: Müşteri numarası.
				pinNumber = 191904: Bu müşterinin PIN numarası.
				checkingBalance = 1000: Bu müşterinin checking hesabındaki bakiye (1000 birim para).
				savingBalance = 5000: Bu müşterinin savings hesabındaki bakiye (5000 birim para).
		*/
		boolean end = false;
		while (!end) {
			try {
				System.out.println("\n Type 1 - Login");
				System.out.println(" Type 2 - Create Account");
				System.out.print("\nChoice: ");
				int choice = menuInput.nextInt();
				switch (choice) {
				case 1:
					getLogin();
					end = true;
					break;
				case 2:
					createAccount();
					end = true;
					break;
				default:
					System.out.println("\nInvalid Choice.");
				}
			} catch (InputMismatchException e) {
				System.out.println("\nInvalid Choice.");
				menuInput.next();
			}
		}
		System.out.println("\nThank You for using this ATM.\n");
		menuInput.close();
		System.exit(0);
	}
}
